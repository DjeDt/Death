#ifndef GENETIC_H
# define GENETIC_H
# define _GNU_SOURCE

////////////////////////////////////////////////////////////////////////////////
/// MACROS
////////////////////////////////////////////////////////////////////////////////

# define STACK_SIZE 1024 * 64

# define POPULATION_SIZE 5
# define MAX_GENE_SIZE 64

# define RANDOM_INTEGER(x) (rand() % x)

# define UNUSED __attribute__ ((unused))

////////////////////////////////////////////////////////////////////////////////
/// INCLUDES
////////////////////////////////////////////////////////////////////////////////

# include <sched.h>
# include <stdio.h>
# include <time.h>
# include <stdlib.h>
# include <unistd.h>
# include <string.h>
# include <sys/types.h>
# include <sys/wait.h>
# include <stdbool.h>
# include <sys/mman.h>
# include <strings.h>


////////////////////////////////////////////////////////////////////////////////
/// ENUMS
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// STRUCTURES
////////////////////////////////////////////////////////////////////////////////

struct		chromosome
{
	int		fitness;
	char	gene[MAX_GENE_SIZE];
};

struct		world
{
	struct chromosome c[POPULATION_SIZE];
	int (*calculate_fitness)(struct chromosome *c);
};

struct		memory
{
	void	*stack;
};

typedef struct		s_host
{
	bool			execution;
	ssize_t			output;
}					t_host;

////////////////////////////////////////////////////////////////////////////////
/// PROTOTYPES
////////////////////////////////////////////////////////////////////////////////

bool		code_generation(char *code);

////////////////////////////////////////////////////////////////////////////////
/// EXTERN MODULES
////////////////////////////////////////////////////////////////////////////////

# include "interpreter.h"

#endif
